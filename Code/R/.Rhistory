window <- 100   #This is for the ksmooth function, below.  It should be proportional to the
# temperature granularity above.  Change either and you must change the other.
Temp.vec <- ksmooth(1:length(Temp.vec),Temp.vec,'normal',window)$y  #This smooths the abrupt step function produced above.
#  NOTE!!!  ksmooth takes a long time.  Samuel is not sure it is necessary.   I am thinking that if
#  it turns out to be necessary, then we could archive these gradient curves and recall as necessary.
#
Temp.vec <- unlist(Temp.vec)  #Here we make the 'list' structure from the object above into an array.
#plot(Temp.vec[(1:(length(Temp.vec)/1e3))*1e3],type='l')
#******************
#  Here I set the gradient to zero, giving programmed temperature or isothermal
#
#******************
#Temp.vec <-rep(0,length(Temp.vec))
#tp.rate <- 0
###################
#
#		This is the end of the temperature profile function
#
###################
Temp2Pow.vec <- seq(from=0, to=1000,by=1/power.ace)^1.646 #address the temperature /100, get the temp raised to the power
TempNoPow.vec <- seq(from=0, to=1000,by=1/power.ace) #address the temperature /100, get the temp. No Power here (HDT)
#################
#
#	The vector 'TempNoPow.vec' containing the basic temperature profile or template
#		is returned from temperature profile function call.
#	The vector 'Temp2Pow' is sequence of temperatures raised to the 1.646 power
#		to adjust for the viscosity of helium.
#
#################
run.time <- 1500000  #Number of potential steps to get compounds out of column.
#run.time <- 6000
pause.count <- 10000  #number of frames to skip in plotting results.  The 'big.matrix'
# takes a snapshot at every 'pause.count' time for illustrating the
# progress of the molecules.
big.matrix <- matrix(0,nrow=run.time/pause.count+1,ncol=n.mol*j)
#  This has the location of every molecule at each recorded time point.  Only
#   time points recorded are every "pause.count" apart.
##### Start Standard Execution
x <- detector <- matrix(0, nrow=j, ncol=n.mol)	# This matrix keeps track of x-axis location of each
# molecule of each analyte. Initially each is at point
# '0' as indicated here.  The y-axis location is simply the
# scaled value of the molecule's index number in the matrix x.
injection.width <- 2  #  Width of injection plug at time zero in cm.
for(i in 1:j){   x[i,] <- sample(n.mol, size=n.mol, replace=F)*injection.width/n.mol }
# The above loop returns an order from 1 to n.mol for each molecule.  Since it is divided
# by n.mol, in essence we get each molecule uniquely with a value between 0 and 1.
# Multiplying by injection.width gives a plug that has the n.mol molecules uniformly distributed
# from 0 cm to injection.width cm at the beginning of the column.
#
#   Note that the standard deviation below is calculated from s^2 and not from the var
#   of the uniform. HDT
#
#   Remember, x[i,] is the vector of locations in x-axis of i-th analyte.  This location is used
#	at each step for each molecule to determine temperature and velocity.
#	This is also used to plot location of the molecules.  The y-axis values for plot are determined
#	from the matrix column index.  (Rows indicate analyte and column indicate individual molecules.)
#
move.count <- 0
res.end <- matrix(0, nrow=j, ncol=2)
eluted.1 <- eluted.2 <- 1
detected.1 <- detected.2 <- 0
##########  Temporary pseudo-do-loop for debugging.
# n <- 5
##########  This is where the do-loop for n starts.
total.time.1 <- 0
total.time.2 <- 0
spread.1 <- 0
spread.2 <- 0
#for(n in 0:run.time){
Temp.plus <- Temp.vec + tp.rate*n*delta.t + T.0
print(Temp.plus)
rm(list=ls())
########################
###   NEW EQUATION:  This is a step by step program to generate a random walk model
###     for a varietly of moving thermal gradient profiles.
###		This code was UPDATED in Riva with Samuel in May 2016
####################
j <- 2 # number of compounds
n.mol <- 100 #****Number of molecules per compound used in simulation
cols <- c('red','green','magenta','black','blue','grey10')
sigma.not <- 10000*sqrt(1/12)
gamma.1 <-5.113e-3 # This is the molecular diffusion coefficient when using both temp and pressure.
taylor <- 1.647e-1  #  This is the most recent based on solving Anzi's data, using R=1.987.  (141105)
#                     This is the dispersion coefficient due to resistence to transport and taylor dispersion.
gamma.3 <-7.676e-8 # This is resistence to flow for adsorption/deporption (no pressure variable)
gamma.2 <- 1.217e-9 # This is Golay's formula for resistence to transport when using both temp and pressure in diffusion expression.
chk.sm <- 0
#
#
#C <- c(-12.5075, -12.7202)
#h <- c(11416, 11521)
X <- c(9,10) #alkane length
C <- -7.22173 - 0.47406*X  #This is the formula for calculating C where X is the number of carbons.  Includes phase ratio
h <- 2284 + 819*X    #  calculation of enthalpy (need to check this)
h <- h* 4.18442979  # This is to change enthalpy from kcal units to Joules in the units.
C <- c(-11.1277,-12.4829)
h <- c(34926.27,40845.71)
C <- c(-11.1277,-11.2829)
h <- c(34926.27,35245.71)
delta.t <- 0.0001 # 0.001 ***# time step: Reciprocol is the number of time steps per second
R <- 8.3144621 #  Boltzman's constant in Joules per Kelvin mole.  I used to use R = 1.987 kcal per Kelvin mole.
col.length <- 20#0 #*** column length [cm]
col.length <- 1000 # measured in cm
T.0 <- 323 # initial temperature [Kelvin, K]
T.0 <- 313
T.0 <- 290
diameter <- 0.0100 #inner diameter of the column in centimeters.
#diameter <- 0.0001 #measured in meters for test.
p.i <- 57.16  #This is the column inlet pressure by gage measured in psi.  For true inlet must add atmosphere pressure.
#p.i <- 30
p.o <- 14.69595   #This is the outlet pressure or Atmospheric pressure in psi.
p.o <- 13.8
p.i <- p.i*6894.757 # This converts pressure from psi units to Pascals  (Anzi solution)
p.o <- p.o*6894.757 # This converts pressure from psi units to Pascals
#p.i <- p.i*10000/1.450377  #converting psi to Pa (pascals)  (Wiki Solution)
#p.o <- p.o*10000/1.450377  #converting psi to Pa
p.i <- p.i + p.o  #This is the true inlet pressure.
w <- 6 # velocity of gradient [cm/sec]
tp.rate <- 0.5 #degrees C per second. This is the rate at which the column is heated after a gradient is established.
#tp.rate <- 1.7
tp.rate <- .25 #This is the more reasonable rate of raising temperature under TPGC
#             rep(0,times=1e4*(col.length-ramp.length) )
Temp.granularity <- 1e2#4 # granularity of temperatures across column. data points/cm
power.ace <- 100
###################
#
#		Here is the temperature profile function.
#		It produces the initial heat gradient profile that we heat.
#		We need to make this a function call to either a data file of a function.
#
#		The values needed are:
#			Temp.granularity
#			ramp.length
#			ramp.height
#			zone.len
#			window
#			col.length
#
#		Return a vector  Temp.vec that has the profile of temperature along
#		the column.  We will then heat this profile up.
#
##################
plate.len <-  10 #60 #cm  Note that the plate width is calculated by subtracting the plate.len
#from the column length and then dividing the difference by the number of
# turns.  This are called isotherms.
#
decay.const <- 0.5 #0.05  # THis is the exponential decay factor, giving the rate of decay
T.ramp <- 50 #height of the temperature ramp; delta T across plate.  This is not T.0
expo.decay <- exp(-(1:(plate.len*Temp.granularity))/Temp.granularity*decay.const)*T.ramp
#This is determines the exponential decay
#
#plot(expo.decay[(1:plate.len)*Temp.granularity],type='l', xlab='Temperature', main=paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))
# Execute the above line to look at exponential temperature decay down plate.
n.corners <- 200# number of switchbacks, and rungs  #This turns out to be the number of isotherms.
# n.corners <- col.length-plate.len
len.cross <- (col.length-plate.len)/n.corners  #This gives the length of each isotherm.
corner <- round(seq(1,length(expo.decay), length=n.corners+1))  #indexes the position of each of the corners
# on the exponential decay curve.
Temp.vec <- NULL
for(jj in 1:n.corners)
{
Temp.vec <- c(Temp.vec, expo.decay[corner[jj]:(corner[jj+1])]) #This gives the temperature at each
# of the corners
Temp.vec <- c(Temp.vec, rep(expo.decay[corner[jj+1]],times=len.cross*Temp.granularity))
#  This determines the temperature at each point along the isotherm.
}
Temp.vec <- Temp.vec[1:(col.length*Temp.granularity)]
#plot(Temp.vec[1:(col.length*10)*Temp.granularity/10],type='l', xlab='Temperature', main=expression(paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))) # Execute to look at temperature along column
window <- 100   #This is for the ksmooth function, below.  It should be proportional to the
# temperature granularity above.  Change either and you must change the other.
Temp.vec <- ksmooth(1:length(Temp.vec),Temp.vec,'normal',window)$y  #This smooths the abrupt step function produced above.
#  NOTE!!!  ksmooth takes a long time.  Samuel is not sure it is necessary.   I am thinking that if
#  it turns out to be necessary, then we could archive these gradient curves and recall as necessary.
#
Temp.vec <- unlist(Temp.vec)  #Here we make the 'list' structure from the object above into an array.
#plot(Temp.vec[(1:(length(Temp.vec)/1e3))*1e3],type='l')
#******************
#  Here I set the gradient to zero, giving programmed temperature or isothermal
#
#******************
#Temp.vec <-rep(0,length(Temp.vec))
#tp.rate <- 0
###################
#
#		This is the end of the temperature profile function
#
###################
Temp2Pow.vec <- seq(from=0, to=1000,by=1/power.ace)^1.646 #address the temperature /100, get the temp raised to the power
TempNoPow.vec <- seq(from=0, to=1000,by=1/power.ace) #address the temperature /100, get the temp. No Power here (HDT)
#################
#
#	The vector 'TempNoPow.vec' containing the basic temperature profile or template
#		is returned from temperature profile function call.
#	The vector 'Temp2Pow' is sequence of temperatures raised to the 1.646 power
#		to adjust for the viscosity of helium.
#
#################
run.time <- 1500000  #Number of potential steps to get compounds out of column.
#run.time <- 6000
pause.count <- 10000  #number of frames to skip in plotting results.  The 'big.matrix'
# takes a snapshot at every 'pause.count' time for illustrating the
# progress of the molecules.
big.matrix <- matrix(0,nrow=run.time/pause.count+1,ncol=n.mol*j)
#  This has the location of every molecule at each recorded time point.  Only
#   time points recorded are every "pause.count" apart.
##### Start Standard Execution
x <- detector <- matrix(0, nrow=j, ncol=n.mol)	# This matrix keeps track of x-axis location of each
# molecule of each analyte. Initially each is at point
# '0' as indicated here.  The y-axis location is simply the
# scaled value of the molecule's index number in the matrix x.
injection.width <- 2  #  Width of injection plug at time zero in cm.
for(i in 1:j){   x[i,] <- sample(n.mol, size=n.mol, replace=F)*injection.width/n.mol }
# The above loop returns an order from 1 to n.mol for each molecule.  Since it is divided
# by n.mol, in essence we get each molecule uniquely with a value between 0 and 1.
# Multiplying by injection.width gives a plug that has the n.mol molecules uniformly distributed
# from 0 cm to injection.width cm at the beginning of the column.
#
#   Note that the standard deviation below is calculated from s^2 and not from the var
#   of the uniform. HDT
#
#   Remember, x[i,] is the vector of locations in x-axis of i-th analyte.  This location is used
#	at each step for each molecule to determine temperature and velocity.
#	This is also used to plot location of the molecules.  The y-axis values for plot are determined
#	from the matrix column index.  (Rows indicate analyte and column indicate individual molecules.)
#
move.count <- 0
res.end <- matrix(0, nrow=j, ncol=2)
eluted.1 <- eluted.2 <- 1
detected.1 <- detected.2 <- 0
##########  Temporary pseudo-do-loop for debugging.
# n <- 5
##########  This is where the do-loop for n starts.
total.time.1 <- 0
total.time.2 <- 0
spread.1 <- 0
spread.2 <- 0
#for(n in 0:run.time){
n = 0
Temp.plus <- Temp.vec + tp.rate*n*delta.t + T.0
print(Temp.plus)
rm(list=ls())
########################
###   NEW EQUATION:  This is a step by step program to generate a random walk model
###     for a varietly of moving thermal gradient profiles.
###		This code was UPDATED in Riva with Samuel in May 2016
####################
j <- 2 # number of compounds
n.mol <- 100 #****Number of molecules per compound used in simulation
cols <- c('red','green','magenta','black','blue','grey10')
sigma.not <- 10000*sqrt(1/12)
gamma.1 <-5.113e-3 # This is the molecular diffusion coefficient when using both temp and pressure.
taylor <- 1.647e-1  #  This is the most recent based on solving Anzi's data, using R=1.987.  (141105)
#                     This is the dispersion coefficient due to resistence to transport and taylor dispersion.
gamma.3 <-7.676e-8 # This is resistence to flow for adsorption/deporption (no pressure variable)
gamma.2 <- 1.217e-9 # This is Golay's formula for resistence to transport when using both temp and pressure in diffusion expression.
chk.sm <- 0
#
#
#C <- c(-12.5075, -12.7202)
#h <- c(11416, 11521)
X <- c(9,10) #alkane length
C <- -7.22173 - 0.47406*X  #This is the formula for calculating C where X is the number of carbons.  Includes phase ratio
h <- 2284 + 819*X    #  calculation of enthalpy (need to check this)
h <- h* 4.18442979  # This is to change enthalpy from kcal units to Joules in the units.
C <- c(-11.1277,-12.4829)
h <- c(34926.27,40845.71)
C <- c(-11.1277,-11.2829)
h <- c(34926.27,35245.71)
delta.t <- 0.0001 # 0.001 ***# time step: Reciprocol is the number of time steps per second
R <- 8.3144621 #  Boltzman's constant in Joules per Kelvin mole.  I used to use R = 1.987 kcal per Kelvin mole.
col.length <- 20#0 #*** column length [cm]
col.length <- 1000 # measured in cm
T.0 <- 323 # initial temperature [Kelvin, K]
T.0 <- 313
T.0 <- 290
diameter <- 0.0100 #inner diameter of the column in centimeters.
#diameter <- 0.0001 #measured in meters for test.
p.i <- 57.16  #This is the column inlet pressure by gage measured in psi.  For true inlet must add atmosphere pressure.
#p.i <- 30
p.o <- 14.69595   #This is the outlet pressure or Atmospheric pressure in psi.
p.o <- 13.8
p.i <- p.i*6894.757 # This converts pressure from psi units to Pascals  (Anzi solution)
p.o <- p.o*6894.757 # This converts pressure from psi units to Pascals
#p.i <- p.i*10000/1.450377  #converting psi to Pa (pascals)  (Wiki Solution)
#p.o <- p.o*10000/1.450377  #converting psi to Pa
p.i <- p.i + p.o  #This is the true inlet pressure.
w <- 6 # velocity of gradient [cm/sec]
tp.rate <- 0.5 #degrees C per second. This is the rate at which the column is heated after a gradient is established.
#tp.rate <- 1.7
tp.rate <- .25 #This is the more reasonable rate of raising temperature under TPGC
#             rep(0,times=1e4*(col.length-ramp.length) )
Temp.granularity <- 1e2#4 # granularity of temperatures across column. data points/cm
power.ace <- 100
###################
#
#		Here is the temperature profile function.
#		It produces the initial heat gradient profile that we heat.
#		We need to make this a function call to either a data file of a function.
#
#		The values needed are:
#			Temp.granularity
#			ramp.length
#			ramp.height
#			zone.len
#			window
#			col.length
#
#		Return a vector  Temp.vec that has the profile of temperature along
#		the column.  We will then heat this profile up.
#
##################
plate.len <-  10 #60 #cm  Note that the plate width is calculated by subtracting the plate.len
#from the column length and then dividing the difference by the number of
# turns.  This are called isotherms.
#
decay.const <- 0.5 #0.05  # THis is the exponential decay factor, giving the rate of decay
T.ramp <- 50 #height of the temperature ramp; delta T across plate.  This is not T.0
expo.decay <- exp(-(1:(plate.len*Temp.granularity))/Temp.granularity*decay.const)*T.ramp
#This is determines the exponential decay
#
#plot(expo.decay[(1:plate.len)*Temp.granularity],type='l', xlab='Temperature', main=paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))
# Execute the above line to look at exponential temperature decay down plate.
n.corners <- 200# number of switchbacks, and rungs  #This turns out to be the number of isotherms.
# n.corners <- col.length-plate.len
len.cross <- (col.length-plate.len)/n.corners  #This gives the length of each isotherm.
corner <- round(seq(1,length(expo.decay), length=n.corners+1))  #indexes the position of each of the corners
# on the exponential decay curve.
Temp.vec <- NULL
for(jj in 1:n.corners)
{
Temp.vec <- c(Temp.vec, expo.decay[corner[jj]:(corner[jj+1])]) #This gives the temperature at each
# of the corners
Temp.vec <- c(Temp.vec, rep(expo.decay[corner[jj+1]],times=len.cross*Temp.granularity))
#  This determines the temperature at each point along the isotherm.
}
Temp.vec <- Temp.vec[1:(col.length*Temp.granularity)]
#plot(Temp.vec[1:(col.length*10)*Temp.granularity/10],type='l', xlab='Temperature', main=expression(paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))) # Execute to look at temperature along column
window <- 100   #This is for the ksmooth function, below.  It should be proportional to the
# temperature granularity above.  Change either and you must change the other.
Temp.vec <- ksmooth(1:length(Temp.vec),Temp.vec,'normal',window)$y  #This smooths the abrupt step function produced above.
#  NOTE!!!  ksmooth takes a long time.  Samuel is not sure it is necessary.   I am thinking that if
#  it turns out to be necessary, then we could archive these gradient curves and recall as necessary.
#
Temp.vec <- unlist(Temp.vec)  #Here we make the 'list' structure from the object above into an array.
#plot(Temp.vec[(1:(length(Temp.vec)/1e3))*1e3],type='l')
#******************
#  Here I set the gradient to zero, giving programmed temperature or isothermal
#
#******************
#Temp.vec <-rep(0,length(Temp.vec))
#tp.rate <- 0
###################
#
#		This is the end of the temperature profile function
#
###################
Temp2Pow.vec <- seq(from=0, to=1000,by=1/power.ace)^1.646 #address the temperature /100, get the temp raised to the power
TempNoPow.vec <- seq(from=0, to=1000,by=1/power.ace) #address the temperature /100, get the temp. No Power here (HDT)
#################
#
#	The vector 'TempNoPow.vec' containing the basic temperature profile or template
#		is returned from temperature profile function call.
#	The vector 'Temp2Pow' is sequence of temperatures raised to the 1.646 power
#		to adjust for the viscosity of helium.
#
#################
run.time <- 1500000  #Number of potential steps to get compounds out of column.
#run.time <- 6000
pause.count <- 10000  #number of frames to skip in plotting results.  The 'big.matrix'
# takes a snapshot at every 'pause.count' time for illustrating the
# progress of the molecules.
big.matrix <- matrix(0,nrow=run.time/pause.count+1,ncol=n.mol*j)
#  This has the location of every molecule at each recorded time point.  Only
#   time points recorded are every "pause.count" apart.
##### Start Standard Execution
x <- detector <- matrix(0, nrow=j, ncol=n.mol)	# This matrix keeps track of x-axis location of each
# molecule of each analyte. Initially each is at point
# '0' as indicated here.  The y-axis location is simply the
# scaled value of the molecule's index number in the matrix x.
injection.width <- 2  #  Width of injection plug at time zero in cm.
for(i in 1:j){   x[i,] <- sample(n.mol, size=n.mol, replace=F)*injection.width/n.mol }
# The above loop returns an order from 1 to n.mol for each molecule.  Since it is divided
# by n.mol, in essence we get each molecule uniquely with a value between 0 and 1.
# Multiplying by injection.width gives a plug that has the n.mol molecules uniformly distributed
# from 0 cm to injection.width cm at the beginning of the column.
#
#   Note that the standard deviation below is calculated from s^2 and not from the var
#   of the uniform. HDT
#
#   Remember, x[i,] is the vector of locations in x-axis of i-th analyte.  This location is used
#	at each step for each molecule to determine temperature and velocity.
#	This is also used to plot location of the molecules.  The y-axis values for plot are determined
#	from the matrix column index.  (Rows indicate analyte and column indicate individual molecules.)
#
move.count <- 0
res.end <- matrix(0, nrow=j, ncol=2)
eluted.1 <- eluted.2 <- 1
detected.1 <- detected.2 <- 0
##########  Temporary pseudo-do-loop for debugging.
# n <- 5
##########  This is where the do-loop for n starts.
total.time.1 <- 0
total.time.2 <- 0
spread.1 <- 0
spread.2 <- 0
#for(n in 0:run.time){
n = 0
Temp.plus <- Temp.vec + tp.rate*n*delta.t + T.0
print(Temp.vec)
rm(list=ls())
########################
###   NEW EQUATION:  This is a step by step program to generate a random walk model
###     for a varietly of moving thermal gradient profiles.
###		This code was UPDATED in Riva with Samuel in May 2016
####################
j <- 2 # number of compounds
n.mol <- 100 #****Number of molecules per compound used in simulation
cols <- c('red','green','magenta','black','blue','grey10')
sigma.not <- 10000*sqrt(1/12)
gamma.1 <-5.113e-3 # This is the molecular diffusion coefficient when using both temp and pressure.
taylor <- 1.647e-1  #  This is the most recent based on solving Anzi's data, using R=1.987.  (141105)
#                     This is the dispersion coefficient due to resistence to transport and taylor dispersion.
gamma.3 <-7.676e-8 # This is resistence to flow for adsorption/deporption (no pressure variable)
gamma.2 <- 1.217e-9 # This is Golay's formula for resistence to transport when using both temp and pressure in diffusion expression.
chk.sm <- 0
#
#
#C <- c(-12.5075, -12.7202)
#h <- c(11416, 11521)
X <- c(9,10) #alkane length
C <- -7.22173 - 0.47406*X  #This is the formula for calculating C where X is the number of carbons.  Includes phase ratio
h <- 2284 + 819*X    #  calculation of enthalpy (need to check this)
h <- h* 4.18442979  # This is to change enthalpy from kcal units to Joules in the units.
C <- c(-11.1277,-12.4829)
h <- c(34926.27,40845.71)
C <- c(-11.1277,-11.2829)
h <- c(34926.27,35245.71)
delta.t <- 0.0001 # 0.001 ***# time step: Reciprocol is the number of time steps per second
R <- 8.3144621 #  Boltzman's constant in Joules per Kelvin mole.  I used to use R = 1.987 kcal per Kelvin mole.
col.length <- 20#0 #*** column length [cm]
col.length <- 1000 # measured in cm
T.0 <- 323 # initial temperature [Kelvin, K]
T.0 <- 313
T.0 <- 290
diameter <- 0.0100 #inner diameter of the column in centimeters.
#diameter <- 0.0001 #measured in meters for test.
p.i <- 57.16  #This is the column inlet pressure by gage measured in psi.  For true inlet must add atmosphere pressure.
#p.i <- 30
p.o <- 14.69595   #This is the outlet pressure or Atmospheric pressure in psi.
p.o <- 13.8
p.i <- p.i*6894.757 # This converts pressure from psi units to Pascals  (Anzi solution)
p.o <- p.o*6894.757 # This converts pressure from psi units to Pascals
#p.i <- p.i*10000/1.450377  #converting psi to Pa (pascals)  (Wiki Solution)
#p.o <- p.o*10000/1.450377  #converting psi to Pa
p.i <- p.i + p.o  #This is the true inlet pressure.
w <- 6 # velocity of gradient [cm/sec]
tp.rate <- 0.5 #degrees C per second. This is the rate at which the column is heated after a gradient is established.
#tp.rate <- 1.7
tp.rate <- .25 #This is the more reasonable rate of raising temperature under TPGC
#             rep(0,times=1e4*(col.length-ramp.length) )
Temp.granularity <- 1e2#4 # granularity of temperatures across column. data points/cm
power.ace <- 100
###################
#
#		Here is the temperature profile function.
#		It produces the initial heat gradient profile that we heat.
#		We need to make this a function call to either a data file of a function.
#
#		The values needed are:
#			Temp.granularity
#			ramp.length
#			ramp.height
#			zone.len
#			window
#			col.length
#
#		Return a vector  Temp.vec that has the profile of temperature along
#		the column.  We will then heat this profile up.
#
##################
plate.len <-  10 #60 #cm  Note that the plate width is calculated by subtracting the plate.len
#from the column length and then dividing the difference by the number of
# turns.  This are called isotherms.
#
decay.const <- 0.5 #0.05  # THis is the exponential decay factor, giving the rate of decay
T.ramp <- 50 #height of the temperature ramp; delta T across plate.  This is not T.0
expo.decay <- exp(-(1:(plate.len*Temp.granularity))/Temp.granularity*decay.const)*T.ramp
#This is determines the exponential decay
#
#plot(expo.decay[(1:plate.len)*Temp.granularity],type='l', xlab='Temperature', main=paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))
# Execute the above line to look at exponential temperature decay down plate.
n.corners <- 200# number of switchbacks, and rungs  #This turns out to be the number of isotherms.
# n.corners <- col.length-plate.len
len.cross <- (col.length-plate.len)/n.corners  #This gives the length of each isotherm.
corner <- round(seq(1,length(expo.decay), length=n.corners+1))  #indexes the position of each of the corners
# on the exponential decay curve.
Temp.vec <- NULL
for(jj in 1:n.corners)
{
Temp.vec <- c(Temp.vec, expo.decay[corner[jj]:(corner[jj+1])]) #This gives the temperature at each
# of the corners
Temp.vec <- c(Temp.vec, rep(expo.decay[corner[jj+1]],times=len.cross*Temp.granularity))
#  This determines the temperature at each point along the isotherm.
}
Temp.vec <- Temp.vec[1:(col.length*Temp.granularity)]
#plot(Temp.vec[1:(col.length*10)*Temp.granularity/10],type='l', xlab='Temperature', main=expression(paste("PlateLength: ",plate.len, " DecayConst: ", decay.const, "NumbCorners: ", n.corners))) # Execute to look at temperature along column
window <- 100   #This is for the ksmooth function, below.  It should be proportional to the
# temperature granularity above.  Change either and you must change the other.
print(Temp.vec)
Temp.vec <- ksmooth(1:length(Temp.vec),Temp.vec,'normal',window)$y
Temp.vec <- unlist(Temp.vec)
Temp.vec
